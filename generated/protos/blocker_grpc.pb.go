// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/blocker.proto

package protos

import (
	context "context"
	getauthtoken "dnsserver/generated/protos/getauthtoken"
	getstats "dnsserver/generated/protos/getstats"
	toggleblocker "dnsserver/generated/protos/toggleblocker"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockerClient is the client API for Blocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockerClient interface {
	ToggleBlocker(ctx context.Context, in *toggleblocker.ToggleBlockerRequest, opts ...grpc.CallOption) (*toggleblocker.ToggleBlockerResponse, error)
	GetStats(ctx context.Context, in *getstats.GetStatsRequest, opts ...grpc.CallOption) (*getstats.GetStatsResponse, error)
	GetAuthToken(ctx context.Context, in *getauthtoken.GetAuthTokenRequest, opts ...grpc.CallOption) (*getauthtoken.GetAuthTokenResponse, error)
}

type blockerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockerClient(cc grpc.ClientConnInterface) BlockerClient {
	return &blockerClient{cc}
}

func (c *blockerClient) ToggleBlocker(ctx context.Context, in *toggleblocker.ToggleBlockerRequest, opts ...grpc.CallOption) (*toggleblocker.ToggleBlockerResponse, error) {
	out := new(toggleblocker.ToggleBlockerResponse)
	err := c.cc.Invoke(ctx, "/Blocker/ToggleBlocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockerClient) GetStats(ctx context.Context, in *getstats.GetStatsRequest, opts ...grpc.CallOption) (*getstats.GetStatsResponse, error) {
	out := new(getstats.GetStatsResponse)
	err := c.cc.Invoke(ctx, "/Blocker/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockerClient) GetAuthToken(ctx context.Context, in *getauthtoken.GetAuthTokenRequest, opts ...grpc.CallOption) (*getauthtoken.GetAuthTokenResponse, error) {
	out := new(getauthtoken.GetAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/Blocker/GetAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockerServer is the server API for Blocker service.
// All implementations must embed UnimplementedBlockerServer
// for forward compatibility
type BlockerServer interface {
	ToggleBlocker(context.Context, *toggleblocker.ToggleBlockerRequest) (*toggleblocker.ToggleBlockerResponse, error)
	GetStats(context.Context, *getstats.GetStatsRequest) (*getstats.GetStatsResponse, error)
	GetAuthToken(context.Context, *getauthtoken.GetAuthTokenRequest) (*getauthtoken.GetAuthTokenResponse, error)
	mustEmbedUnimplementedBlockerServer()
}

// UnimplementedBlockerServer must be embedded to have forward compatible implementations.
type UnimplementedBlockerServer struct {
}

func (UnimplementedBlockerServer) ToggleBlocker(context.Context, *toggleblocker.ToggleBlockerRequest) (*toggleblocker.ToggleBlockerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleBlocker not implemented")
}
func (UnimplementedBlockerServer) GetStats(context.Context, *getstats.GetStatsRequest) (*getstats.GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedBlockerServer) GetAuthToken(context.Context, *getauthtoken.GetAuthTokenRequest) (*getauthtoken.GetAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthToken not implemented")
}
func (UnimplementedBlockerServer) mustEmbedUnimplementedBlockerServer() {}

// UnsafeBlockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockerServer will
// result in compilation errors.
type UnsafeBlockerServer interface {
	mustEmbedUnimplementedBlockerServer()
}

func RegisterBlockerServer(s grpc.ServiceRegistrar, srv BlockerServer) {
	s.RegisterService(&Blocker_ServiceDesc, srv)
}

func _Blocker_ToggleBlocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(toggleblocker.ToggleBlockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockerServer).ToggleBlocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blocker/ToggleBlocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockerServer).ToggleBlocker(ctx, req.(*toggleblocker.ToggleBlockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blocker_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(getstats.GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blocker/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockerServer).GetStats(ctx, req.(*getstats.GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blocker_GetAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(getauthtoken.GetAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockerServer).GetAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blocker/GetAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockerServer).GetAuthToken(ctx, req.(*getauthtoken.GetAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blocker_ServiceDesc is the grpc.ServiceDesc for Blocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blocker",
	HandlerType: (*BlockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToggleBlocker",
			Handler:    _Blocker_ToggleBlocker_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Blocker_GetStats_Handler,
		},
		{
			MethodName: "GetAuthToken",
			Handler:    _Blocker_GetAuthToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/blocker.proto",
}
